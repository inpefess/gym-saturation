
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_age_agent.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_age_agent.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_age_agent.py:


Random and age agents for Vampire and iProver
==============================================

.. GENERATED FROM PYTHON SOURCE LINES 7-12

Random agent for Vampire
-------------------------

We can make a prover environment as any other Gymnasium one
We will always add a wrapper to extract formulae labels

.. GENERATED FROM PYTHON SOURCE LINES 12-19

.. code-block:: Python


    import gymnasium as gym

    from gym_saturation.wrappers import LabelsExtractor

    env = LabelsExtractor(gym.make("Vampire-v0"))








.. GENERATED FROM PYTHON SOURCE LINES 20-21

before using the environment, we should reset it

.. GENERATED FROM PYTHON SOURCE LINES 21-24

.. code-block:: Python


    observation, info = env.reset()








.. GENERATED FROM PYTHON SOURCE LINES 25-26

``gym-saturation`` environments don't return any ``info``

.. GENERATED FROM PYTHON SOURCE LINES 26-29

.. code-block:: Python


    print(info)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {}




.. GENERATED FROM PYTHON SOURCE LINES 30-33

Observation is a tuple of CNF formulae.
By default, we are trying to prove a basic group theory lemma:
every idempotent element equals the identity

.. GENERATED FROM PYTHON SOURCE LINES 33-37

.. code-block:: Python


    print("Observation:")
    print("\n".join(observation["observation"]))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Observation:
    cnf(c_1,axiom,mult(X0,mult(X1,X2))=mult(mult(X0,X1),X2),file('input.p')).
    cnf(c_2,axiom,mult(e,X0)=X0,file('input.p')).
    cnf(c_3,axiom,e=mult(inv(X0),X0),file('input.p')).
    cnf(c_4,axiom,a=mult(a,a),file('input.p')).
    cnf(c_5,axiom,e!=a,file('input.p')).




.. GENERATED FROM PYTHON SOURCE LINES 38-39

Wrappers extracts formulae labels for us:

.. GENERATED FROM PYTHON SOURCE LINES 39-43

.. code-block:: Python


    labels = list(observation["labels"])
    print(labels)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ['c_1', 'c_2', 'c_3', 'c_4', 'c_5']




.. GENERATED FROM PYTHON SOURCE LINES 44-46

Here is an example of an episode during which we play random actions.
We set the random seed for reproducibility.

.. GENERATED FROM PYTHON SOURCE LINES 46-62

.. code-block:: Python


    import random

    random.seed(0)

    terminated, truncated = False, False
    while not (terminated or truncated):
        action = random.choice(labels)
        observation, reward, terminated, truncated, info = env.step(action)
        print("Action:", action, "Observation:")
        print("\n".join(observation["observation"]))
        labels.remove(action)
        labels += list(observation["labels"])

    env.close()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Action: c_4 Observation:

    Action: c_5 Observation:

    Action: c_1 Observation:
    cnf(c_6,plain,mult(a,X0)=mult(a,mult(a,X0)),inference(superposition,[],[c_1,c_4])).
    Action: c_3 Observation:
    cnf(c_11,plain,mult(inv(X0),mult(X0,X1))=X1,inference(forward_demodulation,[],[c_10,c_2])).
    Action: c_11 Observation:
    cnf(c_18,plain,$false,inference(subsumption_resolution,[],[c_17,c_5])).




.. GENERATED FROM PYTHON SOURCE LINES 63-64

the episode is terminated

.. GENERATED FROM PYTHON SOURCE LINES 64-67

.. code-block:: Python


    print(terminated, truncated)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    True False




.. GENERATED FROM PYTHON SOURCE LINES 68-69

It means we arrived at a contradiction (``$false``) which proves the lemma.

.. GENERATED FROM PYTHON SOURCE LINES 69-71

.. code-block:: Python

    print(observation["observation"][-1])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    cnf(c_18,plain,$false,inference(subsumption_resolution,[],[c_17,c_5])).




.. GENERATED FROM PYTHON SOURCE LINES 72-76

Age agent for iProver
----------------------

We initialise iProver-based environment in the same way

.. GENERATED FROM PYTHON SOURCE LINES 76-79

.. code-block:: Python


    env = LabelsExtractor(gym.make("iProver-v0"))








.. GENERATED FROM PYTHON SOURCE LINES 80-81

Special magic needed if running by Jupyter

.. GENERATED FROM PYTHON SOURCE LINES 81-86

.. code-block:: Python


    import nest_asyncio

    nest_asyncio.apply()








.. GENERATED FROM PYTHON SOURCE LINES 87-89

Instead of a random agent, let's use Age agent which selects actions in the
order they appear

.. GENERATED FROM PYTHON SOURCE LINES 89-103

.. code-block:: Python


    observation, info = env.reset()
    print("Observation:")
    print("\n".join(observation["observation"]))
    labels = list(observation["labels"])
    terminated = False
    while not terminated:
        action = labels.pop(0)
        observation, reward, terminated, truncated, info = env.step(action)
        print("Action:", action, "Observation:")
        print("\n".join(observation["observation"]))
        labels += list(observation["labels"])
    env.close()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Observation:
    cnf(c_53,axiom,e!=a,file('input.p')).
    cnf(c_52,axiom,mult(a,a)=a,file('input.p')).
    cnf(c_50,axiom,mult(e,X0)=X0,file('input.p')).
    cnf(c_51,axiom,mult(inv(X0),X0)=e,file('input.p')).
    cnf(c_49,axiom,mult(mult(X0,X1),X2)=mult(X0,mult(X1,X2)),file('input.p')).
    Action: c_53 Observation:

    Action: c_52 Observation:

    Action: c_50 Observation:

    Action: c_51 Observation:

    Action: c_49 Observation:
    cnf(c_63,plain,mult(a,mult(a,X0))=mult(a,X0),inference(superposition,[],[c_52,c_49])).
    cnf(c_62,plain,mult(inv(X0),mult(X0,X1))=mult(e,X1),inference(superposition,[],[c_51,c_49])).
    cnf(c_64,plain,mult(mult(X0,mult(X1,X2)),X3)=mult(mult(X0,X1),mult(X2,X3)),inference(superposition,[],[c_49,c_49])).
    Action: c_63 Observation:
    cnf(c_68,plain,mult(a,mult(mult(a,X0),X1))=mult(mult(a,X0),X1),inference(superposition,[],[c_63,c_49])).
    Action: c_62 Observation:
    cnf(c_70,plain,mult(inv(X0),mult(X0,X1))=X1,inference(demodulation,[],[c_62,c_50])).
    cnf(c_74,plain,mult(inv(a),a)=a,inference(superposition,[],[c_52,c_70])).
    cnf(c_72,plain,mult(inv(e),X0)=X0,inference(superposition,[],[c_50,c_70])).
    cnf(c_73,plain,mult(inv(inv(X0)),e)=X0,inference(superposition,[],[c_51,c_70])).
    cnf(c_77,plain,mult(inv(inv(X0)),X1)=mult(X0,X1),inference(superposition,[],[c_70,c_70])).
    cnf(c_76,plain,mult(inv(a),mult(a,X0))=mult(a,X0),inference(superposition,[],[c_63,c_70])).
    cnf(c_78,plain,mult(inv(X0),mult(mult(X0,X1),X2))=mult(X1,X2),inference(superposition,[],[c_70,c_49])).
    cnf(c_71,plain,mult(inv(mult(X0,X1)),mult(X0,mult(X1,X2)))=X2,inference(superposition,[],[c_49,c_70])).
    Action: c_64 Observation:

    Action: c_68 Observation:

    Action: c_70 Observation:

    Action: c_74 Observation:
    cnf(c_85,plain,e=a,inference(demodulation,[],[c_74,c_51])).
    cnf(c_86,plain,$false,inference(forward_subsumption_resolution,[],[c_85,c_53])).




.. GENERATED FROM PYTHON SOURCE LINES 104-105

We still arrive at a contradiction

.. GENERATED FROM PYTHON SOURCE LINES 105-108

.. code-block:: Python


    print(terminated, truncated)
    print(observation["observation"][-1])




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    True False
    cnf(c_86,plain,$false,inference(forward_subsumption_resolution,[],[c_85,c_53])).





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.792 seconds)


.. _sphx_glr_download_auto_examples_plot_age_agent.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_age_agent.ipynb <plot_age_agent.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_age_agent.py <plot_age_agent.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_age_agent.zip <plot_age_agent.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
