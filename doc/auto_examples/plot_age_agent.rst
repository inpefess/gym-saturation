
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_age_agent.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_age_agent.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_age_agent.py:


Random and age agents for Vampire and iProver
==============================================

.. GENERATED FROM PYTHON SOURCE LINES 6-10

Random agent for Vampire
-------------------------

To make a ``gym-saturation`` environment, we have to import the package

.. GENERATED FROM PYTHON SOURCE LINES 10-15

.. code-block:: default


    import gymnasium as gym

    import gym_saturation








.. GENERATED FROM PYTHON SOURCE LINES 16-17

then we can make a prover environment as any other Gymnasium one

.. GENERATED FROM PYTHON SOURCE LINES 17-20

.. code-block:: default


    env = gym.make("Vampire-v0")








.. GENERATED FROM PYTHON SOURCE LINES 21-22

before using the environment, we should reset it

.. GENERATED FROM PYTHON SOURCE LINES 22-25

.. code-block:: default


    observation, info = env.reset()








.. GENERATED FROM PYTHON SOURCE LINES 26-27

``gym-saturation`` environments don't return any ``info``

.. GENERATED FROM PYTHON SOURCE LINES 27-30

.. code-block:: default


    print(info)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {}




.. GENERATED FROM PYTHON SOURCE LINES 31-32

observation is a dictionary with two keys

.. GENERATED FROM PYTHON SOURCE LINES 32-35

.. code-block:: default


    print(observation.keys())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    dict_keys(['real_obs', 'action_mask'])




.. GENERATED FROM PYTHON SOURCE LINES 36-37

``real_obs`` value is a JSON representation of logic clauses

.. GENERATED FROM PYTHON SOURCE LINES 37-44

.. code-block:: default


    import pprint

    from gym_saturation.constants import ACTION_MASK, REAL_OBS

    pprint.pp(observation[REAL_OBS])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ({'literals': 'mult(X0,mult(X1,X2)) = mult(mult(X0,X1),X2)',
      'label': '1',
      'role': 'lemma',
      'inference_rule': 'input',
      'inference_parents': (),
      'birth_step': 0},
     {'literals': 'mult(e,X0) = X0',
      'label': '2',
      'role': 'lemma',
      'inference_rule': 'input',
      'inference_parents': (),
      'birth_step': 0},
     {'literals': 'e = mult(inv(X0),X0)',
      'label': '3',
      'role': 'lemma',
      'inference_rule': 'input',
      'inference_parents': (),
      'birth_step': 0},
     {'literals': 'a = mult(a,a)',
      'label': '4',
      'role': 'lemma',
      'inference_rule': 'input',
      'inference_parents': (),
      'birth_step': 0},
     {'literals': 'e != a',
      'label': '5',
      'role': 'lemma',
      'inference_rule': 'input',
      'inference_parents': (),
      'birth_step': 0})




.. GENERATED FROM PYTHON SOURCE LINES 45-46

``action_mask`` is a ``numpy`` array of zeros and ones

.. GENERATED FROM PYTHON SOURCE LINES 46-51

.. code-block:: default


    print(type(observation[ACTION_MASK]))
    print(observation[ACTION_MASK].shape)
    print(observation[ACTION_MASK][:10])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'numpy.ndarray'>
    (1000,)
    [1 1 1 1 1 0 0 0 0 0]




.. GENERATED FROM PYTHON SOURCE LINES 52-55

We can render the environment state in the TPTP format.
By default, we are trying to prove a basic group theory lemma:
every idempotent element equals the identity

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: default


    env.render()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    cnf(1, lemma, mult(X0,mult(X1,X2)) = mult(mult(X0,X1),X2), inference(input, [], [])).
    cnf(2, lemma, mult(e,X0) = X0, inference(input, [], [])).
    cnf(3, lemma, e = mult(inv(X0),X0), inference(input, [], [])).
    cnf(4, lemma, a = mult(a,a), inference(input, [], [])).
    cnf(5, lemma, e != a, inference(input, [], [])).




.. GENERATED FROM PYTHON SOURCE LINES 59-60

here is an example of an episode during which we play random avail actions

.. GENERATED FROM PYTHON SOURCE LINES 60-67

.. code-block:: default


    terminated, truncated = False, False
    while not (terminated or truncated):
        action = env.action_space.sample(mask=observation[ACTION_MASK])
        observation, reward, terminated, truncated, info = env.step(action)
    env.close()








.. GENERATED FROM PYTHON SOURCE LINES 68-69

the episode terminated with positive reward

.. GENERATED FROM PYTHON SOURCE LINES 69-72

.. code-block:: default


    print(terminated, truncated, reward)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    True False 1.0




.. GENERATED FROM PYTHON SOURCE LINES 73-76

It means we arrived at a contradiction (``$false``) which proves the lemma.
Notice the ``birth_step`` number of a contradiction, it shows how many steps
we did to find proof.

.. GENERATED FROM PYTHON SOURCE LINES 76-78

.. code-block:: default

    pprint.pp(observation[REAL_OBS][-1])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'literals': '$false',
     'label': '25',
     'role': 'lemma',
     'inference_rule': 'subsumption_resolution',
     'inference_parents': ('24', '5'),
     'birth_step': 7}




.. GENERATED FROM PYTHON SOURCE LINES 79-82

the package also provides a utility function for extracting only clauses
which became parts of the proof (some steps might be unnecessary to find the
proof)

.. GENERATED FROM PYTHON SOURCE LINES 82-86

.. code-block:: default

    from gym_saturation.utils import get_tstp_proof

    print(get_tstp_proof(observation[REAL_OBS]))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    cnf(1, lemma, mult(X0,mult(X1,X2)) = mult(mult(X0,X1),X2), inference(input, [], [])).
    cnf(15, lemma, mult(inv(X0),mult(X0,X1)) = mult(e,X1), inference(superposition, [], [1, 3])).
    cnf(2, lemma, mult(e,X0) = X0, inference(input, [], [])).
    cnf(16, lemma, mult(inv(X0),mult(X0,X1)) = X1, inference(forward_demodulation, [], [15, 2])).
    cnf(4, lemma, a = mult(a,a), inference(input, [], [])).
    cnf(21, lemma, a = mult(inv(a),a), inference(superposition, [], [16, 4])).
    cnf(3, lemma, e = mult(inv(X0),X0), inference(input, [], [])).
    cnf(24, lemma, e = a, inference(forward_demodulation, [], [21, 3])).
    cnf(5, lemma, e != a, inference(input, [], [])).
    cnf(25, lemma, $false, inference(subsumption_resolution, [], [24, 5])).




.. GENERATED FROM PYTHON SOURCE LINES 87-91

Age agent for iProver
----------------------

We initialise iProver-based environment in the same way

.. GENERATED FROM PYTHON SOURCE LINES 91-94

.. code-block:: default


    env = gym.make("iProver-v0")








.. GENERATED FROM PYTHON SOURCE LINES 95-97

Instead of a random agent, let's use Age agent which selects actions in the
order they became available

.. GENERATED FROM PYTHON SOURCE LINES 97-107

.. code-block:: default


    observation, info = env.reset()
    terminated, truncated = False, False
    action = 0
    while not (terminated or truncated):
        if observation[ACTION_MASK][action] == 1:
            observation, reward, terminated, truncated, info = env.step(action)
        action += 1
    env.close()








.. GENERATED FROM PYTHON SOURCE LINES 108-110

We still arrive at the contradiction but it might take a different number of
steps. And the proof found looks a bit different

.. GENERATED FROM PYTHON SOURCE LINES 110-112

.. code-block:: default


    print(get_tstp_proof(observation[REAL_OBS]))




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    cnf(c_49, lemma, mult(mult(X0,X1),X2)=mult(X0,mult(X1,X2)), inference(input, [], [])).
    cnf(c_62, lemma, mult(inv(X0),mult(X0,X1))=mult(e,X1), inference(superposition, [], [c_51, c_49])).
    cnf(c_50, lemma, mult(e,X0)=X0, inference(input, [], [])).
    cnf(c_70, lemma, mult(inv(X0),mult(X0,X1))=X1, inference(demodulation, [], [c_62, c_50])).
    cnf(c_52, lemma, mult(a,a)=a, inference(input, [], [])).
    cnf(c_74, lemma, mult(inv(a),a)=a, inference(superposition, [], [c_52, c_70])).
    cnf(c_51, lemma, mult(inv(X0),X0)=e, inference(input, [], [])).
    cnf(c_85, lemma, e=a, inference(demodulation, [], [c_74, c_51])).
    cnf(c_53, lemma, e!=a, inference(input, [], [])).
    cnf(c_86, lemma, $false, inference(forward_subsumption_resolution, [], [c_85, c_53])).





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.709 seconds)


.. _sphx_glr_download_auto_examples_plot_age_agent.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_age_agent.py <plot_age_agent.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_age_agent.ipynb <plot_age_agent.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
